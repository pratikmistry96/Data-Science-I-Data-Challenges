geom_line(aes(color = candidate_name)) +
ylim(0, 100) +
xlab("Model Date") +
ylab("Polling Percentage")
#remove(list = ls())
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(lubridate)
trend.plot <- data %>%
filter(state == "National") %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
group_by(candidate_name) %>%
arrange(modeldate) %>%
ggplot(aes(x = modeldate,
y = pct_trend_adjusted)) +
geom_line(aes(color = candidate_name)) +
ylim(0, 100) +
xlab("Model Date") +
ylab("Polling Percentage")
trend.plot <- x %>%
filter(state == "National") %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
group_by(candidate_name) %>%
arrange(modeldate) %>%
ggplot(aes(x = modeldate,
y = pct_trend_adjusted)) +
geom_line(aes(color = candidate_name)) +
ylim(0, 100) +
xlab("Model Date") +
ylab("Polling Percentage")
(ggplotly(trend.plot))
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
shiny::runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
?dexp
?dbinom
?dexp
knitr::opts_chunk$set(echo = TRUE)
x <- 1:100
y <- dexp(x, 0.5)
x <- 1:100
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(0,1,0.01)
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(0,1,0.01)
y <- dexp(x, 1)
plot(x, y)
x <- seq(0,1,0.01)
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(0,110,0.01)
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(0,10,0.01)
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(-1,10,0.01)
y <- dexp(x, 0.5)
plot(x, y)
x <- seq(0,10,0.01)
y <- dexp(x, 0.5)
plot(x, y)
exp_sim <- rexp(10, 0.5)
exp_sim <- rexp(10, 0.5)
hist(exp_sim)
?rexp
exp_sim <- matrix(rexp(7500), 750, 10)
exp_sim <- apply(exp_sim, mean)
exp_sim <- matrix(rexp(7500), 750, 10)
exp_sim <- apply(exp_sim, 1, mean)
exp_sim <- matrix(rexp(7500), 750, 10)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim)
lines(density(exp_sim))
exp_sim <- matrix(rexp(7500), 750, 10)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim, probability = TRUE)
lines(density(exp_sim))
mean(exp_sim)
sd(exp_sim)
exp_sim <- matrix(rexp(7500), 75, 100)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim, probability = TRUE)
lines(density(exp_sim))
mean(exp_sim)
sd(exp_sim)
exp_sim <- matrix(rexp(75000), 75, 1000)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim, probability = TRUE)
lines(density(exp_sim))
exp_sim <- matrix(rexp(7500, 0.5), 75, 100)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim, probability = TRUE)
lines(density(exp_sim))
mean(exp_sim)
sd(exp_sim)
exp_sim <- matrix(rexp(75000, 0.5), 7500, 10)
exp_sim <- apply(exp_sim, 1, mean)
hist(exp_sim, probability = TRUE)
lines(density(exp_sim))
mean(exp_sim)
sd(exp_sim)
rrms10 <- load("rrms10.RData")
rrms10 <- load("rrms10.rdata")
rrms10 <- load("rrms10.rda")
rrms10 <- load("rrms10.rdata")
rrms10 <- load(file = "rrms10.rdata")
rrms10 <- load(file = "rrms10.RData")
rrms10 <- load(file = "rrms10.RData")
rrms10 <- load(file = "rrms10")
rrms10 <- load("rrms10")
shiny::runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
?plotlyOutput
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
?box
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp()
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp()
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
knitr::opts_chunk$set(echo = TRUE)
#remove(list = ls())
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(lubridate)
get_state_avg <- function(data, name, state_vec) {
state_df <- data %>%
filter(state %in% state_vec) %>%
group_by(cycle,
candidate_name,
modeldate,
party) %>%
summarize(state = name,
pct_trend_adjusted = mean(pct_trend_adjusted))
return(state_df)
}
historical_polls <-
read.csv("polls/pres_pollaverages_1968-2016.csv") %>%
select(cycle,
modeldate,
state,
candidate_name,
pct_trend_adjusted) %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state == "National")
polls_2020 <-
read.csv("polls/presidential_poll_averages_2020.csv") %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(candidate_name == c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
select(!pct_estimate)
political_aff <-
read.csv("polls/pres_parties_1968-2020.csv")
polls_1968_2020 <-
historical_polls %>%
rbind(
polls_2020 %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state == "National")
) %>%
arrange(cycle) %>%
inner_join(political_aff, by = c("cycle",
"candidate_name"))
polls_2020_states <- polls_2020 %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state != "National") %>%
mutate(party = if_else(candidate_name == "Joseph R. Biden Jr.",
"Democratic",
"Republican"))
me_dist <- c("ME-1", "ME-2", "Maine")
ne_dist <- c("NE-1", "NE-2", "Nebraska")
nebraska <- get_state_avg(polls_2020_states,
"Nebraska",
ne_dist)
maine <- get_state_avg(polls_2020_states,
"Maine",
me_dist)
polls_2020_states <- polls_2020_states %>%
filter(!(state %in% c(ne_dist,
me_dist,
"Alaska",
"Hawaii"))) %>%
rbind(maine, nebraska) %>%
mutate(state = stringr::str_to_title(state))
polls_2020_split <- split(polls_2020_states, polls_2020_states$party)
dems <- polls_map %>%
filter(candidate_name == "Joseph R. Biden Jr.")
View(polls_2020)
write.csv(polls_2020, "/election_2020/polls_2020.csv")
write.csv(polls_2020, "election_2020/polls_2020.csv")
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
trend.plot <- polls_2020 %>%
filter(state == "National") %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
ggplot(aes(x = modeldate,
y = pct_trend_adjusted,
color = candidate_name)) +
geom_line() +
ylim(0, 100) +
xlab("Model Date") +
ylab("Polling Percentage")
trend.plot <- ggplotly(trend.plot, tooltip = "all")
trend.plot <- polls_2020 %>%
filter(state == "National") %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
ggplot(aes(x = modeldate,
y = pct_trend_adjusted,
color = candidate_name)) +
geom_line() +
ylim(0, 100) +
xlab("Model Date") +
ylab("Polling Percentage")
trend.plot <- ggplotly(trend.plot, tooltip = "all")
trend.plot
polls_2020 %>%
filter(state == "National")
polls_2020 %>%
filter(state == "National") %>%
group_by(candidate_name) %>%
arrange(modeldate)
polls_2020 <-
read.csv("polls/presidential_poll_averages_2020.csv")
read.csv("polls/presidential_poll_averages_2020.csv")
historical_polls <-
read.csv("polls/pres_pollaverages_1968-2016.csv") %>%
select(cycle,
modeldate,
state,
candidate_name,
pct_trend_adjusted) %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state == "National")
polls_2020 <-
read.csv("polls/presidential_poll_averages_2020.csv") %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(candidate_name == c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
select(!pct_estimate)
political_aff <-
read.csv("polls/pres_parties_1968-2020.csv") %>%
filter(state = "National")
read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(state == "National")
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(state == "National")
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump"))
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(state == "National") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump"))
split(x, x$modeldate)
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(state == "National") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump"))
x
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump"))
x
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
group_by(candidate_name) %>%
arrange(modeldate)
x <- read.csv("polls/presidential_poll_averages_2020.csv") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
group_by(candidate_name) %>%
arrange(modeldate)
x
knitr::opts_chunk$set(echo = TRUE)
#remove(list = ls())
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(lubridate)
historical_polls <-
read.csv("polls/pres_pollaverages_1968-2016.csv") %>%
select(cycle,
modeldate,
state,
candidate_name,
pct_trend_adjusted) %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state == "National")
polls_2020 <-
read.csv("polls/presidential_poll_averages_2020.csv") %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(candidate_name == c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
select(!pct_estimate)
political_aff <-
read.csv("polls/pres_parties_1968-2020.csv") %>%
filter(state = "Nation") %>%
filter(candidate_name %in% c("Joseph R. Biden Jr.",
"Donald Trump"))
historical_polls <-
read.csv("polls/pres_pollaverages_1968-2016.csv") %>%
select(cycle,
modeldate,
state,
candidate_name,
pct_trend_adjusted) %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(months(modeldate) == "October",
day(modeldate) == 7,
state == "National")
polls_2020 <-
read.csv("polls/presidential_poll_averages_2020.csv") %>%
mutate(modeldate = as.Date(modeldate, format = "%m/%d/%Y")) %>%
filter(candidate_name == c("Joseph R. Biden Jr.",
"Donald Trump")) %>%
select(!pct_estimate)
political_aff <-
read.csv("polls/pres_parties_1968-2020.csv")
shiny::runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
shiny::runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
?ggplotly
?style
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
runApp('Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020')
?ggplotly
?rename
getwd
getwd()
setwd("Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020/")
polls_2020 <- read.csv("polls_2020.csv")
polls_2020 %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
filter(state == "National",
months(modeldate) %in% month.name[2:10]) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
rename(modeldate = "Poll Date")
polls_2020 %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
filter(state == "National",
months(modeldate) %in% month.name[2:10]) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
rename("Poll Date" = modeldate)
runApp()
View(polls_2020)
x <- polls_2020 %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
filter(state == "National",
months(modeldate) %in% month.name[2:10]) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
rename(modeldate = "Poll Date")
x <- polls_2020 %>%
mutate(modeldate = as.Date(modeldate,
format = "%Y-%m-%d")) %>%
filter(state == "National",
months(modeldate) %in% month.name[2:10]) %>%
arrange(modeldate) %>%
group_by(candidate_name)%>%
rename("Poll Date" = modeldate)
View(polls_2020)
View(x)
x$`Poll Date`
runApp()
runApp()
x %>%
ggplot(aes(x = modeldate,))
View(x)
x %>%
ggplot(aes(x = cycle,))
x %>%
ggplot(aes(x = cycle, y = 'Poll Date'))
ggplot(aes(x = cycle, y = 'Poll Date')) + geom_bar()
x %>%
ggplot(aes(x = cycle, y = 'Poll Date')) + geom_bar()
x %>%
ggplot(aes(x = cycle, y = 'Poll Date')) + geom_line()
ggplot(aes(y = pct_trend_adjusted, x = 'Poll Date')) + geom_col()
x %>%
ggplot(aes(y = pct_trend_adjusted, x = 'Poll Date'))
runApp()
runApp()
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
rm(maine)
rm(nebraska, political_aff)
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
rm(list = ls())
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
runApp('election_2020')
runApp('election_2020')
runApp()
runApp()
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
runApp('election_2020')
source('~/Weill Cornell Medicine/Fall 2020/Data Science I/Data Challenges/Data_Challenge_2/election_2020_datawrangling.R', echo=TRUE)
runApp('election_2020')
