hjust = 1)
)
set.seed(96)
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000)
visitor_simulation[[1]]
visitor_simulation[[2]]
visitor_simulation[[3]]
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) ## Remove any variables in workspace to avoid errors
library(tidyverse) ## Load tidyverse library, which includes dplyr and ggplot2
options(scipen = 999) ## Set this option to avoid scientific notation on y-axis
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>%
inner_join(state_pop,by = c("year","state"))
plt_visitors <- function(data, normalize) {
if(normalize){
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors/pop,
group = parkname)) +
labs(
y = "Park Visitors Normalized by State Population"
)
}else{
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors,
group = parkname)) +
labs(
y = "Park Visitors"
)
}
plt_obj <- plt_obj +
geom_line(aes(col = parkname),
lwd = 1) +
labs(
title = "Park Visitors Over the Years",
x = "Year",
col = "Park Names"
)
return(plt_obj)
}
sim_visitors <- function(data, park, reps){
data_sub <- data %>%
filter(parkname == park)
visitors_1941 <- data_sub$visitors[data_sub$year == 1941]
visitors_1942 <- data_sub$visitors[data_sub$year == 1942]
total_visitors <- visitors_1941 + visitors_1942
visitors_sim <- data.frame(dist = rbinom(reps,
total_visitors,
p = 0.5))
visitors_sim %>%
ggplot(aes(dist)) +
geom_histogram(binwidth = 10,
fill = "blue") +
geom_vline(xintercept = visitors_1942,
col = "red",
lwd = 1) +
annotate("text",
x = visitors_1942 + 100,
y = 10,
label = "observed",
hjust = "right",
angle = 90) +
labs(
title = paste0("Simulated Distribution of Visitors in 1942",
" - ", park),
x = "Number of Visitors - if p = 0.50",
y = "Count"
)
}
plt_visitors(parks, FALSE)
plt_visitors(parks, TRUE)
parks %>%
filter(year %in% 1935:1955) %>%
mutate(year = factor(year)) %>%
plt_visitors(FALSE) +
theme(
axis.text.x = element_text(angle = 45,
hjust = 1)
)
set.seed(96)
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000)
visitor_simulation[[1]]
visitor_simulation[[2]]
visitor_simulation[[3]]
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) ## Remove any variables in workspace to avoid errors
library(tidyverse) ## Load tidyverse library, which includes dplyr and ggplot2
options(scipen = 999) ## Set this option to avoid scientific notation on y-axis
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>%
inner_join(state_pop,by = c("year","state"))
plt_visitors <- function(data, normalize) {
if(normalize){
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors/pop,
group = parkname)) +
labs(
y = "Park Visitors Normalized by State Population"
)
}else{
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors,
group = parkname)) +
labs(
y = "Park Visitors"
)
}
plt_obj <- plt_obj +
geom_line(aes(col = parkname),
lwd = 1) +
labs(
title = "Park Visitors Over the Years",
x = "Year",
col = "Park Names"
)
return(plt_obj)
}
sim_visitors <- function(data, park, reps){
data_sub <- data %>%
filter(parkname == park)
visitors_1941 <- data_sub$visitors[data_sub$year == 1941]
visitors_1942 <- data_sub$visitors[data_sub$year == 1942]
total_visitors <- visitors_1941 + visitors_1942
visitors_sim <- data.frame(dist = rbinom(reps,
total_visitors,
p = 0.5))
visitors_sim %>%
ggplot(aes(dist)) +
geom_histogram(binwidth = 10,
fill = "blue") +
geom_vline(xintercept = visitors_1942,
col = "red",
lwd = 1) +
annotate("text",
x = visitors_1942 + 150,
y = 10,
label = "observed",
hjust = "right",
angle = 0) +
labs(
title = paste0("Simulated Distribution of Visitors in 1942",
" - ", park),
x = "Number of Visitors - if p = 0.50",
y = "Count"
)
}
plt_visitors(parks, FALSE)
plt_visitors(parks, TRUE)
parks %>%
filter(year %in% 1935:1955) %>%
mutate(year = factor(year)) %>%
plt_visitors(FALSE) +
theme(
axis.text.x = element_text(angle = 45,
hjust = 1)
)
set.seed(96)
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000)
visitor_simulation[[1]]
visitor_simulation[[2]]
visitor_simulation[[3]]
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) ## Remove any variables in workspace to avoid errors
library(tidyverse) ## Load tidyverse library, which includes dplyr and ggplot2
options(scipen = 999) ## Set this option to avoid scientific notation on y-axis
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>%
inner_join(state_pop,by = c("year","state"))
plt_visitors <- function(data, normalize) {
if(normalize){
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors/pop,
group = parkname)) +
labs(
y = "Park Visitors Normalized by State Population"
)
}else{
plt_obj <- data %>%
ggplot(aes(x = year,
y = visitors,
group = parkname)) +
labs(
y = "Park Visitors"
)
}
plt_obj <- plt_obj +
geom_line(aes(col = parkname),
lwd = 1) +
labs(
title = "Park Visitors Over the Years",
x = "Year",
col = "Park Names"
)
return(plt_obj)
}
sim_visitors <- function(data, park, reps){
data_sub <- data %>%
filter(parkname == park)
visitors_1941 <- data_sub$visitors[data_sub$year == 1941]
visitors_1942 <- data_sub$visitors[data_sub$year == 1942]
total_visitors <- visitors_1941 + visitors_1942
visitors_sim <- data.frame(dist = rbinom(reps,
total_visitors,
p = 0.5))
visitors_sim %>%
ggplot(aes(dist)) +
geom_histogram(binwidth = 10,
fill = "blue") +
geom_vline(xintercept = visitors_1942,
col = "red",
lwd = 1) +
annotate("text",
x = visitors_1942 + 150,
y = 10,
label = "observed",
hjust = "left",
angle = 0) +
labs(
title = paste0("Simulated Distribution of Visitors in 1942",
" - ", park),
x = "Number of Visitors - if p = 0.50",
y = "Count"
)
}
plt_visitors(parks, FALSE)
plt_visitors(parks, TRUE)
parks %>%
filter(year %in% 1935:1955) %>%
mutate(year = factor(year)) %>%
plt_visitors(FALSE) +
theme(
axis.text.x = element_text(angle = 45,
hjust = 1)
)
set.seed(96)
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000)
visitor_simulation[[1]]
visitor_simulation[[2]]
visitor_simulation[[3]]
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>% ## Convert year from characters to numeric
inner_join(state_pop,by = c("year","state")) %>% ## Add the state population by year and state
mutate(norm_visitors = visitors/pop)
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>% ## Convert year from characters to numeric
inner_join(state_pop,by = c("year","state")) %>% ## Add the state population by year and state
mutate(norm_visitors = visitors/pop)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) ## Remove any variables in workspace to avoid errors
library(tidyverse) ## Load tidyverse library, which includes dplyr and ggplot2
options(scipen = 999) ## Set this option to avoid scientific notation on y-axis
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>% ## Convert year from characters to numeric
inner_join(state_pop,by = c("year","state")) %>% ## Add the state population by year and state
mutate(norm_visitors = visitors/pop) ## Normalize visitors by state population
plt_visitors <- function(data, normalize) { ## Create a function called "plt_visitors" with inputs data and logical
## value for plot normalization
if(normalize){ ## Use an if statement to see if we're plotting the visitors normalized by population
plt_obj <- data %>% ## Store the plot object in a variable titled 'plt_obj'
ggplot(aes(x = year, ## Make the x-axis year
y = norm_visitors, ## Make the y-axis the visitors normalized by population
group = parkname)) + ## Group by park names
labs(
y = "Park Visitors Normalized by State Population" ## Add y-label
)
}else{ ## The else will create an object for non-normalized data
plt_obj <- data %>%
ggplot(aes(x = year,## x-axis is the year
y = visitors, ## make the y-axis the raw number of visitors
group = parkname)) +
labs(
y = "Park Visitors"
)
}
plt_obj <- plt_obj + ## Add common properties to the plot object
geom_line(aes(col = parkname), ## Color the lines by park name
lwd = 1) + ## Adjust line width
labs(
title = "Park Visitors Over the Years", ## Title the graph
x = "Year", ## Label the x axis
col = "Park Names" ## Title the legend
)
return(plt_obj) ## Return the plot
}
## Create a function called 'sim_visitors' with inputs: data, park(name), and reps(repetition)
sim_visitors <- function(data, park, reps){
data_sub <- data %>% ## Create a variable called data_sub to subset the data frame
filter(parkname == park) ## Filter the data by the input specified park name
visitors_1941 <- data_sub$visitors[data_sub$year == 1941] ## Extract the number of visitors from year 1941
visitors_1942 <- data_sub$visitors[data_sub$year == 1942] ## Extract the number of visitors from year 1942
total_visitors <- visitors_1941 + visitors_1942 ## Add the number of visitors from 1941 and 1942
## Run a simulation and store it in a data frame using a probability of 0.5
visitors_sim <- data.frame(dist = rbinom(reps,
total_visitors,
p = 0.5))
## Plot the distribution of the simulation
visitors_sim %>%
ggplot(aes(dist)) + ## Use the above calculated simulation as the input
geom_histogram(binwidth = 10, ## Create a histogram with a bindwidth of 20
fill = "blue") +
geom_vline(xintercept = visitors_1942, ## Add an x-intercept of the observed values of visitors in 1942
col = "red",
lwd = 1) +
annotate("text", ## use annotate to add an annotation for the observed number of visitors
x = visitors_1942 + 150,
y = 10,
label = "observed",
hjust = "left",
angle = 0) +
labs(
title = paste0("Simulated Distribution of Visitors in 1942", ## Add the title
" - ", park),
x = "Number of Visitors - if p = 0.50", ## Add x label
y = "Count" ## Add the y label
)
}
plt_visitors(parks, FALSE) ## Plot visitor information over the years by park
plt_visitors(parks, TRUE) ## Plot normalized visitor information
parks %>%
filter(year %in% 1935:1955) %>% ## Filter the data and restrict the years between 1935 and 1955
mutate(year = factor(year)) %>% ## Turn the year values into factors
plt_visitors(FALSE) + ## Use the plot function with the normalization = FALSE
theme(
axis.text.x = element_text(angle = 45, ## Adjust the text angle to 45
hjust = 1) ## Align the text
)
set.seed(96) ## Set the seed to ensure randomization is always the same
## Create a list of park names to use as input for map function
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
## Use a map function to simulate visitors for all three parks
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000) ## Iterate the data 1000 times
visitor_simulation[[1]] ## Plot the Joshua Tree distribution
visitor_simulation[[2]] ## Plot the crater Lake distribution
visitor_simulation[[3]] ## plot the zion distribution
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) ## Remove any variables in workspace to avoid errors
library(tidyverse) ## Load tidyverse library, which includes dplyr and ggplot2
options(scipen = 999) ## Set this option to avoid scientific notation on y-axis
## Load national park data and store it into a variable: parks
parks <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv")
## Load state population data and store it into a a variable: state_pop
state_pop <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/state_pop.csv")
parks <- parks %>%
filter(parkname %in% c("Joshua Tree", ## Filter the data to restrict it to 3 national parks
"Crater Lake",
"Zion"),
year != "Total") %>% ## Remove "Total" from the years
mutate(year = as.numeric(year)) %>% ## Convert year from characters to numeric
inner_join(state_pop,by = c("year","state")) %>% ## Add the state population by year and state
mutate(norm_visitors = visitors/pop) ## Normalize visitors by state population
plt_visitors <- function(data, normalize) { ## Create a function called "plt_visitors" with inputs data and logical
## value for plot normalization
if(normalize){ ## Use an if statement to see if we're plotting the visitors normalized by population
plt_obj <- data %>% ## Store the plot object in a variable titled 'plt_obj'
ggplot(aes(x = year, ## Make the x-axis year
y = norm_visitors, ## Make the y-axis the visitors normalized by population
group = parkname)) + ## Group by park names
labs(
y = "Park Visitors Normalized by State Population" ## Add y-label
)
}else{ ## The else will create an object for non-normalized data
plt_obj <- data %>%
ggplot(aes(x = year,## x-axis is the year
y = visitors, ## make the y-axis the raw number of visitors
group = parkname)) +
labs(
y = "Park Visitors"
)
}
plt_obj <- plt_obj + ## Add common properties to the plot object
geom_line(aes(col = parkname), ## Color the lines by park name
lwd = 1) + ## Adjust line width
labs(
title = "Park Visitors Over the Years", ## Title the graph
x = "Year", ## Label the x axis
col = "Park Names" ## Title the legend
)
return(plt_obj) ## Return the plot
}
## Create a function called 'sim_visitors' with inputs: data, park(name), and reps(repetition)
sim_visitors <- function(data, park, reps){
data_sub <- data %>% ## Create a variable called data_sub to subset the data frame
filter(parkname == park) ## Filter the data by the input specified park name
visitors_1941 <- data_sub$visitors[data_sub$year == 1941] ## Extract the number of visitors from year 1941
visitors_1942 <- data_sub$visitors[data_sub$year == 1942] ## Extract the number of visitors from year 1942
total_visitors <- visitors_1941 + visitors_1942 ## Add the number of visitors from 1941 and 1942
## Run a simulation and store it in a data frame using a probability of 0.5
visitors_sim <- data.frame(dist = rbinom(reps,
total_visitors,
p = 0.5))
## Plot the distribution of the simulation
visitors_sim %>%
ggplot(aes(dist)) + ## Use the above calculated simulation as the input
geom_histogram(binwidth = 10, ## Create a histogram with a bindwidth of 20
fill = "blue") +
geom_vline(xintercept = visitors_1942, ## Add an x-intercept of the observed values of visitors in 1942
col = "red",
lwd = 1) +
annotate("text", ## use annotate to add an annotation for the observed number of visitors
x = visitors_1942 + 150,
y = 10,
label = "observed",
hjust = "left",
angle = 0) +
labs(
title = paste0("Simulated Distribution of Visitors in 1942", ## Add the title
" - ", park),
x = "Number of Visitors - if p = 0.50", ## Add x label
y = "Count" ## Add the y label
)
}
plt_visitors(parks, FALSE) ## Plot visitor information over the years by park
plt_visitors(parks, TRUE) ## Plot normalized visitor information
parks %>%
filter(year %in% 1935:1955) %>% ## Filter the data and restrict the years between 1935 and 1955
mutate(year = factor(year)) %>% ## Turn the year values into factors
plt_visitors(FALSE) + ## Use the plot function with the normalization = FALSE
theme(
axis.text.x = element_text(angle = 45, ## Adjust the text angle to 45
hjust = 1) ## Align the text
)
set.seed(96) ## Set the seed to ensure randomization is always the same
## Create a list of park names to use as input for map function
park_names <- list("Joshua Tree",
"Crater Lake",
"Zion")
## Use a map function to simulate visitors for all three parks
visitor_simulation <- map(park_names,
sim_visitors,
data = parks,
reps = 1000) ## Iterate the data 1000 times
visitor_simulation[[1]] ## Plot the Joshua Tree distribution
visitor_simulation[[2]] ## Plot the crater Lake distribution
visitor_simulation[[3]] ## plot the zion distribution
